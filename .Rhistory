getwd()
terror_db =
fread(file = "./data/globalterrorismdb.csv", stringsAsFactors = F) %>%
mutate(., date = paste(iyear, imonth, iday, sep = "-")) %>%
select(.,
eventid,
date,
doubt_terrorism = doubtterr,
country = country_txt,
region = region_txt,
provstate,
city,
latitude,
longitude,
attacktype = attacktype1_txt,
suicide,
weapontype = weaptype1_txt,
weaponsubtype = weapsubtype1_txt,
targettype = targtype1_txt,
targetsubtype = targsubtype1_txt,
nationality = natlty1_txt,
perpname = gname,
nkill,
nwound
)
volatility_db = fread(file = "./data/^VIX.csv", stringsAsFactors = F) %>% select(., date = Date, vix_close = Close)
sandp_db = fread(file = "./data/^GSPC.csv", stringsAsFactors = F) %>% select(., date = Date, gspc_close = Close)
View(sandp_db)
View(terror_db)
View(volatility_db)
terror_db =
fread(file = "./data/globalterrorismdb.csv", stringsAsFactors = F) %>%
mutate(., date = paste(iyear, imonth, iday, sep = "-")) %>%
select(.,
eventid,
date,
doubt_terrorism = doubtterr,
country = country_txt,
region = region_txt,
provstate,
city,
latitude,
longitude,
attacktype = attacktype1_txt,
suicide,
weapontype = weaptype1_txt,
weaponsubtype = weapsubtype1_txt,
targettype = targtype1_txt,
targetsubtype = targsubtype1_txt,
nationality = natlty1_txt,
perpname = gname,
nkill,
nwound
)
volatility_db = fread(file = "./data/^VIX.csv", stringsAsFactors = F) %>% select(., date = Date, vix_close = Close)
sandp_db = fread(file = "./data/^GSPC.csv", stringsAsFactors = F) %>% select(., date = Date, gspc_close = Close)
terror_db = terror_db %>%
inner_join(., volatility_db, by = "date") %>%
inner_join(., sandp_db, by = "date") #%>%
filter(.,doubt_terrorism != -9)
terror_db$weapontype =
ifelse(terror_db$weapontype == "Vehicle (not to include vehicle-borne explosives, i.e., car or truck bombs)",
"Vehicle",
terror_db$weapontype)
write.csv(terror_db, file = "./data/terror_db.csv", row.names = F)
unique(lubridate::year(as.Date(date)))
unique(lubridate::year(as.Date(terror_db$date)))
runApp()
terror_db %>% filter(., lubridate::year(as.Date(date))==1995)
View(terror_db %>% filter(., lubridate::year(as.Date(date))==1995))
vix_sandp_db = inner_join(volatility_db, sandp_db, by = "date")
View(vix_sandp_db)
write.csv(vix_sandp_db, file = "./data/vix_sandp_db.csv", row.names = F)
vix_sandp_db = fread(file = "./data/vix_sandp_db.csv", stringsAsFactors = F)
View(vix_sandp_db)
glimpse(vix_sandp_db)
vix_sandp_db = fread(file = "./data/vix_sandp_db.csv", stringsAsFactors = F) %>% mutate(., date = as.Date(date))
glimpse(vix_sandp_db)
#Import databases
terror_db = fread(file = "./data/terror_db.csv", stringsAsFactors = F) %>% mutate(., date = as.Date(date))
glimpse(terror_db)
runApp()
View(vix_sandp_db %>% filter(., lubridate::year(date) == 1995))
runApp()
class(lubridate::year(vix_sandp_db$date))
runApp()
?gvisAnnotationChart
runApp()
View(vix_sandp_db)
runApp()
View(vix_sandp_db)
#Filter overall dataset by the year selected by user
stockmarket_by_year_db = vix_sandp_db %>% gather(., key = "value", value = "market")
View(stockmarket_by_year_db)
#Filter overall dataset by the year selected by user
stockmarket_by_year_db = vix_sandp_db %>% gather(., key = "value", value = "market", -date)
View(stockmarket_by_year_db)
#Filter overall dataset by the year selected by user
stockmarket_by_year_db = vix_sandp_db %>% gather(., key = "market", value = "value", -date)
View(stockmarket_by_year_db)
runApp()
gvisAnnotationChart(
vix_sandp_db,
datevar = "date",
numvar = "value",
idvar = "market"
)
gvisAnnotationChart(
vix_sandp_db,
datevar = "date",
numvar = "value"#,
#idvar = "market"
)
gvisAnnotationChart(
stockmarket_by_year_db,
datevar = "date",
numvar = "value",
idvar = "market"
)
runApp()
temp = read.table('https://s3.amazonaws.com/graderdata/Temp.txt', header = TRUE)
rm(list=ls(-temp))
rm(list=ls())
temp = read.table('https://s3.amazonaws.com/graderdata/Temp.txt', header = TRUE)
?pt
runApp()
glimpse(temp)
rm(list=ls())
temp = read.table('https://s3.amazonaws.com/graderdata/Temp.txt', header = TRUE)
#2
ggplot(temp, aes(x = Body.Temp))+geom_bar()
ggplot(temp, aes(x = Gender))+geom_bar()
ggplot(temp, aes(x = Heart.Rate))+geom_bar()
#Visualize relationship between body temperature and heart rate
ggplot(temp, aes(x = Body.Temp, y = Heart.Rate)) + geom_line()
#Visualize relationship between body temperature and heart rate
ggplot(temp, aes(x = Heart.Rate, y = Body.Temp)) + geom_line()
#Visualize relationship between body temperature and heart rate
ggplot(temp, aes(x = Heart.Rate, y = Body.Temp)) + geom_point()
#Visualize relationship between body temperature and heart rate
ggplot(temp, aes(x = Heart.Rate, y = Body.Temp)) + geom_point(method = "lm")
#Visualize relationship between body temperature and heart rate
ggplot(temp, aes(x = Heart.Rate, y = Body.Temp)) + geom_point() + geom_smooth()
#Visualize relationship between body temperature and heart rate
ggplot(temp, aes(x = Heart.Rate, y = Body.Temp)) + geom_point() + geom_smooth(method = "lm")
#Visualize relationship between body temperature and heart rate
ggplot(temp, aes(x = Heart.Rate, y = Body.Temp)) + geom_point() + geom_smooth(method = "lm", se = F)
?t.test
t.test(temp$Body.Temp, mu = mean_expected)
#3
mean_expected = 98.6
t.test(temp$Body.Temp, mu = mean_expected)
#4
male_temp = temp %>% filter(., Gender == "Male")
female_temp = temp %>% filter(., Gender == "Female")
t.test(male_temp$Body.Temp, female_temp$Body.Temp)
?rnorm
?sample
#4 Bonus:
male_bootstrap = sample(male_temp$Body.Temp, size = 65, replace = T)
female_bootstrap = sample(female_temp$Body.Temp, size = 65, replace = T)
t.test(male_bootstrap, female_bootstrap)
?f.test
?ftest
?test
#5
var.test(male_temp$Heart.Rate, female_temp$Heart.Rate)
###########################
#####One-Sample T-Test#####
###########################
set.seed(0)
heights = rnorm(n = 100, mean = 70, sd = 1) #Randomly generating 100 normally
plot(density(heights), main = "Sample Distribution of Heights")
abline(v = 70, lwd = 2, lty = 2)
abline(v = 68, lwd = 2, lty = 2, col = "red")
legend("topright", c("True Mean = 70", "H0 Mean = 68"), lwd = 2,
lty = 2, col = c("black", "red"))
boxplot(heights, main = "Sample Distribution of Heights")
abline(h = 70, lwd = 2, lty = 2)
abline(h = 68, lwd = 2, lty = 2, col = "red")
legend("topright", c("True Mean = 70", "H0 Mean = 68"), lwd = 2,
lty = 2, col = c("black", "red"))
t.statistic = (mean(heights) - 68)/(sd(heights)/sqrt(100)) #Manually calculating
t.statistic                                                #the t-statistic
pt(q = t.statistic, df = 99, lower.tail = FALSE) #P-value is extremely small;
t.test(heights, mu = 68, alternative = "greater") #Same test, using the t.test()
?t.test
t.test(heights, mu = 68) #Same test, using the t.test()
t.test(heights, mu = 68, alternative = "greater") #Same test, using the t.test()
###########################
#####Two-Sample T-Test#####
###########################
set.seed(0)
SAT.Spring = rnorm(100, 1550, 200) #Randomly generating 100 normally distributed
#observations with a mean of 1550 and a
#standard deviation of 200.
SAT.Fall = rnorm(80, 1500, 210) #Randomly generating 80 normally distributed
plot(density(SAT.Spring), xlab = "SAT Score",
main = "Sample Distribution of SAT Scores", col = "red")
lines(density(SAT.Fall), col = "blue")
legend("topright", c("Spring", "Fall"), lwd = 1, col = c("red", "blue"))
boxplot(SAT.Spring, SAT.Fall, main = "Sample Distribution of SAT Scores",
col = c("red", "blue"), names = c("Spring", "Fall"))
#Manually calculating the t-statistic.
t.statistic = (mean(SAT.Spring) - mean(SAT.Fall))/sqrt(var(SAT.Spring)/100 + var(SAT.Fall)/80)
t.statistic
t.test(SAT.Spring, SAT.Fall, alternative = "two.sided") #Conducting the t-test for two
################
#####F-Test#####
################
f.statistic = var(SAT.Fall)/var(SAT.Spring) #Manually calculating the F-statistic.
f.statistic
var.test(SAT.Fall, SAT.Spring, alternative = "two.sided") #Conducting the F-test to
#Manually calculating the t-statistic.
t.statistic = (mean(SAT.Spring) - mean(SAT.Fall))/sqrt(var(SAT.Spring)/100 + var(SAT.Fall)/80)
t.statistic
###########################
#####Two-Sample T-Test#####
###########################
set.seed(0)
SAT.Spring = rnorm(100, 1550, 200) #Randomly generating 100 normally distributed
#observations with a mean of 1550 and a
#standard deviation of 200.
SAT.Fall = rnorm(80, 1500, 210) #Randomly generating 80 normally distributed
#Manually calculating the t-statistic.
t.statistic = (mean(SAT.Spring) - mean(SAT.Fall))/sqrt(var(SAT.Spring)/100 + var(SAT.Fall)/80)
t.statistic
################
#####F-Test#####
################
f.statistic = var(SAT.Fall)/var(SAT.Spring) #Manually calculating the F-statistic.
f.statistic
var.test(SAT.Fall, SAT.Spring, alternative = "two.sided") #Conducting the F-test to
#######################
#####One-Way ANOVA#####
#######################
set.seed(0)
Low.Calorie = rnorm(200, 10, 1) #Randomly generating weight loss measurements
Low.Carb = rnorm(200, 8.5, 1)   #for various diet types.
Low.Fat = rnorm(200, 8, 1)
Control = rnorm(200, 0, 1)
Weight.Loss = c(Low.Calorie, Low.Carb, Low.Fat, Control) #Combining data into
Category = c(rep("Low Calorie", 200),                    #different consolidated
rep("Low Carb", 200),                       #vectors.
rep("Low Fat", 200),
rep("Control", 200))
boxplot(Weight.Loss ~ Category,
col = c("red", "orange", "yellow", "green"),
main = "Distribution of Weight Loss\nfor Various Diets")
summary(aov(Weight.Loss ~ Category)) #Conducting the One-Way ANOVA on the weight
##################################
#####X^2 Test of Independence#####
##################################
quiz.data = matrix(c(44, 21, 12, 18), nrow = 2, ncol = 2, byrow = TRUE)
quiz.data
dimnames(quiz.data) = list(Attendance = c("Present", "Absent"),
Grade = c("Pass", "Fail"))
quiz.data
chisq.test(quiz.data) #Conducting the X^2 test of independence data on the quiz
########################################
#####Chick Weight Data Set Examples#####
########################################
library(datasets) #Load the base R datasets library.
help(chickwts) #See the help documentation for the chickwts dataset to see a
chickwts #Visually inspect the data.
summary(chickwts) #Returns the five-number summary, along with the mean,
sd(chickwts$weight) #Returns the standard deviation of the weight variable.
var(chickwts$weight) #Returns the variance of the weight variable.
table(chickwts) #Returns a contingency table of weight and feed.
plot(density(chickwts$weight), main = "Overall Distribution of Chick Weights")
abline(v = mean(chickwts$weight), lwd = 2, lty = 2)
abline(v = 280, lwd = 2, lty = 2, col = "red")
boxplot(chickwts$weight, main = "Overall Distribution of Chick Weights")
abline(h = mean(chickwts$weight), lwd = 2, lty = 2)
abline(h = 280, lwd = 2, lty = 2, col = "red")
t.test(chickwts$weight, mu = 280, alternative = "less")
boxplot(chickwts$weight ~ chickwts$feed,
col = c("red", "orange", "yellow", "green", "blue", "violet"),
main = "Distribution of Chick Weights\nfor Various Feed Types")
chickwts #Visually inspect the data.
summary(aov(chickwts$weight ~ chickwts$feed))
#We are specifically interested in the casein and meatmeal diet types. Do the
#reported chick weights have the same variance? To determine, conduct an F-test:
var.test(chickwts$weight[chickwts$feed == "casein"],
chickwts$weight[chickwts$feed == "meatmeal"],
alternative = "two.sided")
#5
var.test(male_temp$Heart.Rate, female_temp$Heart.Rate)
#5
var.test(male_temp$Heart.Rate, female_temp$Heart.Rate, alternative = "less")
#5
var.test(female_temp$Heart.Rate, male_temp$Heart.Rate, alternative = "less")
#5
var.test(male_temp$Heart.Rate, female_temp$Heart.Rate, alternative = "less")
#5
var.test(female_temp$Heart.Rate, male_temp$Heart.Rate, alternative = "less")
var(female_temp$Heart.Rate)
var(male_temp$Heart.Rate)
#5
var.test(female_temp$Heart.Rate, male_temp$Heart.Rate)
, alternative = "less"
library(datasets)
PlantGrowth
plantgrowth = PlantGrowth
#5
var.test(female_temp$Heart.Rate, male_temp$Heart.Rate, alternative = "two.sided")
less
less
#5
var.test(female_temp$Heart.Rate, male_temp$Heart.Rate, alternative = "less")
plantgrowth = PlantGrowth
t.test(temp$Body.Temp[temp$Gender == "Male"], temp$Body.Temp[temp$Gender == "Female"])
#4 Bonus:
male_bootstrap = sample(temp$Body.Temp[temp$Gender == "Male"], size = 65, replace = T)
female_bootstrap = sample(temp$Body.Temp[temp$Gender == "Female"], size = 65, replace = T)
t.test(male_bootstrap, female_bootstrap)
#4 Bonus:
set_seed(0)
#4 Bonus:
setseed(0)
#4 Bonus:
set.seed(0)
male_bootstrap = sample(temp$Body.Temp[temp$Gender == "Male"], size = 65, replace = T)
female_bootstrap = sample(temp$Body.Temp[temp$Gender == "Female"], size = 65, replace = T)
t.test(male_bootstrap, female_bootstrap)
t.test(chickswt$weight[chickswts$feed == "caesein"],
chickswt$weight[chickswts$feed == "horsebean"])
t.test(chickwt$weight[chickwts$feed == "caesein"],
chickwt$weight[chickwts$feed == "horsebean"])
t.test(chickwts$weight[chickwts$feed == "caesein"],
chickwts$weight[chickwts$feed == "horsebean"])
t.test(chickwts$weight[chickwts$feed == "caesein"],
chickwts$weight[chickwts$feed == "horsebean"], alternative = "two.sided")
########################################
#####Chick Weight Data Set Examples#####
########################################
library(datasets) #Load the base R datasets library.
chickwts #Visually inspect the data.
t.test(chickwts$weight[chickwts$feed == "caesein"],
chickwts$weight[chickwts$feed == "horsebean"], alternative = "two.sided")
t.test(chickwts$weight[chickwts$feed == "caesein"],
chickwts$weight[chickwts$feed == "horsebean"], alternative = "two.sided")
t.test(chickwts$weight[chickwts$feed == "casein"],
chickwts$weight[chickwts$feed == "horsebean"], alternative = "two.sided")
glimpse(PlantGrowth)
#1
boxplot(PlantGrowth$weight, "Overall Distribution of Plant Weight")
#1
boxplot(PlantGrowth$weight, main = "Overall Distribution of Plant Weight")
boxplot(chickwts$weight, main = "Overall Distribution of Chick Weights")
boxplot(heights, main = "Sample Distribution of Heights")
boxplot(Weight.Loss ~ Category,
col = c("red", "orange", "yellow", "green"),
main = "Distribution of Weight Loss\nfor Various Diets")
#1
boxplot(PlantGrowth$weight ~ PlantGrowth$group, main = "Distribution of Plant Weight by Treatment")
unique(PlantGrowth$group)
#1
boxplot(PlantGrowth$weight ~ PlantGrowth$group, col = c("red", "orange", "blue"), main = "Distribution of Plant Weight by Treatment")
#1
boxplot(PlantGrowth$weight ~ PlantGrowth$group, main = "Distribution of Plant Weight by Treatment")
#2
control = PlantGrowth$weight[PlantGrowth$group == "ctrl"]
trt1 = PlantGrowth$weight[PlantGrowth$group == "trt1"]
trt2 = PlantGrowth$weight[PlantGrowth$group == "trt2"]
sd(control)
sd(trt1)
sd(trt2)
?bartlett.test
bartlett.test(c(control, trt1, trt2))
bartlett.test(list(control, trt1, trt2))
bartlett.test(list(sd(control), sd(trt1), sd(trt2)))
bartlett.test(c(sd(control), sd(trt1), sd(trt2)))
bartlett.test(list(control, trt1, trt2))
#3
summary(aov(PlantGrowth$weight ~ PlantGrowth$group))
# 2. Convert the inspection.date column from character to date format.
system.time(raw.df$inspection.date = parse_date(raw.df$inspection.date, format = "%m/%d/%Y"))
# 2. Convert the inspection.date column from character to date format.
system.time(parse_date(raw.df$inspection.date, format = "%m/%d/%Y"))
library(tidyverse)
library(data.table)
library(dplyr)
library(lubridate)
library(tidyverse)
library(data.table)
library(dplyr)
library(lubridate)
### 1.2 Load dataset
```{r load_data, cache=TRUE, warning=FALSE, message=FALSE}
#raw.df <- readr::read_csv("./DOHMH_New_York_City_Restaurant_Inspection_Results.csv")
raw.df = fread(file = "./DOHMH_New_York_City_Restaurant_Inspection_Results.csv", stringsAsFactors = FALSE) #Rewrote the read function for efficiency
```
#raw.df <- readr::read_csv("./DOHMH_New_York_City_Restaurant_Inspection_Results.csv")
raw.df = fread(file = "./DOHMH_New_York_City_Restaurant_Inspection_Results.csv", stringsAsFactors = FALSE) #Rewrote the read function for efficiency
# 2. Convert the inspection.date column from character to date format.
system.time(parse_date(raw.df$inspection.date, format = "%m/%d/%Y"))
system.time(as.Date(raw.df$inspection.date, format = "%m/%d/%Y"))
# 1. Convert all the column names to lower cases and rename the columns that have empty space.
colnames(raw.df) = tolower(colnames(raw.df))
raw.df = raw.df %>% rename(., cuisine = `cuisine description`, inspection.date = `inspection date`)
# 2. Convert the inspection.date column from character to date format.
raw.df$inspection.date = parse_date(raw.df$inspection.date, format = "%m/%d/%Y")
raw.df = raw.df %>% mutate(., month = month(inspection.date))
#Academy solution:
raw.df = raw.df %>% mutate(grade = ifelse(0 < score & score > 14, 'A',
ifelse(score < 28, 'B', 'C')))
View(HairEyeColor)
View(HairEyeColor)
NA >= 0
#1
mosaicplot(HairEyeColor, shade = TRUE)
?melt
View(HairEyeColor)
#2
brownbluefemales = HairEyeColor %>% filter(., Sex == "Female" & (Eye == "Brown" | Eye == "Blue"))
library(dplyr)
#2
brownbluefemales = HairEyeColor %>% filter(., Sex == "Female" & (Eye == "Brown" | Eye == "Blue"))
#2
brownbluefemales = HairEyeColor %>% filter(., Sex == "Female" & (Eye == "Brown" | Eye == "Blue"))
class(HairEyeColor)
HairEyeColor = as.data.frame(HairEyeColor)
#2
brownbluefemales = HairEyeColor %>% filter(., Sex == "Female" & (Eye == "Brown" | Eye == "Blue"))
View(brownbluefemales)
View(brownbluefemales)
mosaicplot(brownbluefemales, shade = TRUE)
mosaicplot(brownbluefemales)
, shade = TRUE
mosaicplot(brownbluefemales, shade = TRUE)
chisq.test(brownbluefemales)
brownbluefemales
?chisq.test
?matrix
brownbluefemales
closure_ratio_boro = inspections %>%
group_by(., boro) %>%
summarise(., inspection_closure_ratio = sum(action == "closed" | action =="reclosed")/n())
#2
brownbluefemales = HairEyeColor %>%
filter(., Sex == "Female" & (Eye == "Brown" | Eye == "Blue")) %>%
group_by(., Eye, Hair) %>%
summarise(., Freq = sum(Freq))
mosaicplot(brownbluefemales, shade = TRUE)
brownbluefemales
data.matrix(brownbluefemales)
brownbluefemales
chisq.test(data.matrix(brownbluefemales))
data.matrix(brownbluefemales)
?xtabs
xtabs(brownbluefemales)
xtabs(data = brownbluefemales)
brownbluefemales
#2
brownbluefemales = HairEyeColor %>%
filter(., Sex == "Female" & (Eye == "Brown" | Eye == "Blue"))
xtabs(data = brownbluefemales)
xtabs(data = brownbluefemales)
#2
brownbluefemales = HairEyeColor %>%
filter(., Sex == "Female" & (Eye == "Brown" | Eye == "Blue")) %>%
group_by(., Eye, Hair) %>%
summarise(., Freq = sum(Freq))
xtabs(data = brownbluefemales)
View(brownbluefemales)
xtab(data = brownbluefemales, Freq ~ Hair + Eye)
xtabs(data = brownbluefemales, Freq ~ Hair + Eye)
chisq.test(xtabs(data = brownbluefemales, Freq~Hair+Eye))\
chisq.test(xtabs(data = brownbluefemales, Freq~Hair+Eye))
chisq.test(xtabs(data = brownbluefemales, formula = Freq~Hair+Eye, exclude = c('Hazel', 'Green')))
?leafletOutput
shiny::runApp()
?addCircleMarkers
View(terror_db)
runApp()
?sidebarUserPanel
runApp()
runApp()
?addTiles
event = paste(terror_db$date, terror_db$attacktype, sep = ": ")
event
runApp()
runApp()
terror_db$date[1]
between(terror_db$date[1], 1990, 2017)
between(year(terror_db$date[1]), 1990, 2017)
between(year(terror_db$date[1]), 1991, 2017)
View(terror_db %>% filter(., between(year(date), 1995, 2000)))
?observeEvent
runApp()
unique(terror_db$attacktype)
?checkboxGroupInput
runApp()
?L.Control
?addStaticLabels
?addPopups
leaflet() %>%
addProviderTiles("Esri.WorldStreetMap") %>%
addCircleMarkers(lng = terrorism_attacks()$longitude, lat = terrorism_attacks()$latitude,
label = paste(terrorism_attacks()$date, terrorism_attacks()$attacktype, sep = ": "),
radius = 1, fill = T,
opacity = 0.3, fillOpacity = 0.3,
color="red", fillColor="red") %>%
addControl(position = "topright", html = "Num. kills = ")
runApp()
terror_db %>% summarise(., total = n())
terror_db %>% summarise(., total = n())[1]
test = terror_db %>% summarise(., total = n())
test[1]
test[[1]]
runApp()
